<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:jaxws="http://cxf.apache.org/jaxws" xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jee="http://www.springframework.org/schema/jee" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:mongo="http://www.springframework.org/schema/data/mongo"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xsi:schemaLocation="
http://cxf.apache.org/jaxws
http://cxf.apache.org/schemas/jaxws.xsd
http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee.xsd
http://www.springframework.org/schema/data/mongo http://www.springframework.org/schema/data/mongo/spring-mongo.xsd 
http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd
">
	<!-- =============== 实现类的bean，需要spring注入 ============================ -->
<!-- 使用endpoint方式生成的wsdl信息比较简单 -->
<!-- 	<jaxws:endpoint id="reportWebSevice" implementor="cn.com.dhcc.query.creditpersonwebservice.service.impl.CreditPersonReportWebServiceImpl"
		address="/ReportQuery" /> -->
		
		<jaxws:server id="reportWebSevice" serviceClass="cn.com.dhcc.creditquery.person.queryapi.service.CpqPersonReportQueryServiceWS" address="/ReportQuery">
	        <jaxws:serviceBean>
	            <bean class="cn.com.dhcc.creditquery.person.queryapi.service.impl.CpqPersonReportQueryServiceWSImpl"></bean>
	        </jaxws:serviceBean>
    	</jaxws:server>

	<!-- 开启注解配置，实现自动注入 -->
	<context:annotation-config />
	<!-- 开启注解事务，实现自动配置 -->
	<tx:annotation-driven />

	<context:property-placeholder
		ignore-unresolvable="true" location="classpath*:/*.properties" />
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		destroy-method="close">
		<!-- Connection Info -->
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<!-- Connection Pooling Info -->
		<property name="maxActive" value="${dbcp.maxActive}" />
		<property name="maxIdle" value="${dbcp.maxIdle}" />
		<property name="defaultAutoCommit" value="false" />
		<!-- 连接Idle一个小时后超时 -->
		<!-- <property name="timeBetweenEvictionRunsMillis" value="3600000" /> -->
		<!-- <property name="minEvictableIdleTimeMillis" value="3600000" /> -->

		<!-- 连接120s后超时 -->
		<property name="timeBetweenEvictionRunsMillis" value="120000" />
		<property name="minEvictableIdleTimeMillis" value="120000" />
		<!-- 这里建议配置为TRUE，防止取到的连接不可用 -->
		<property name="testOnBorrow" value="true" />
		<property name="testOnReturn" value="false" />

		<property name="filters" value="stat" />

	</bean>
	<!-- 使用annotation 自动注册bean, 并保证@Required、@Autowired的属性被注入 -->
	<context:component-scan base-package="cn.com.*.*">
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
		<context:exclude-filter type="annotation"
			expression="org.springframework.web.bind.annotation.ControllerAdvice" />
	</context:component-scan>

	<bean id="entityManagerFactory"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="jpaVendorAdapter" ref="hibernateJpaVendorAdapter" />
		<property name="packagesToScan" value="cn.com.*.*" />
		<!-- <property name="packagesToScan"> <list> <value>cn.com.*.*</value> 
			<value>com.*.*</value> </list> </property> -->
		<property name="jpaProperties">
			<props>
				<!-- 命名规则 My_NAME->MyName -->
				<prop key="hibernate.ejb.naming_strategy">org.hibernate.cfg.ImprovedNamingStrategy</prop>
				<prop key="hibernate.show_sql">true</prop>
			</props>
		</property>
	</bean>

	<bean id="hibernateJpaVendorAdapter"
		class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
		<property name="databasePlatform">
			<bean factory-method="getDialect"
				class="cn.com.dhcc.query.creditquerycommon.util.HibernateUtil">
				<constructor-arg ref="dataSource" />
			</bean>
		</property>
		<property name="showSql" value="false" />
	</bean>


	<!-- Jpa 事务配置 -->
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory" />
	</bean>

	<!-- 使用annotation定义事务 -->
	<tx:annotation-driven transaction-manager="transactionManager"
		proxy-target-class="true" />

	<!--factory-class 配置接收DAO的信息 -->
	<jpa:repositories base-package="cn.com.*"
		transaction-manager-ref="transactionManager"
		factory-class="cn.com.dhcc.query.queryapicommon.util.jpa.CommonRepositoryFactoryBean"
		entity-manager-factory-ref="entityManagerFactory" />

	<!-- JSR303 Validator定义 -->
	<bean id="validator"
		class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean" />


	<!-- Reids 配置 开始 -->
	<context:property-placeholder location="classpath:redis.properties" />
	<bean id="redisson" class="cn.com.dhcc.credit.platform.util.RedissonUtil"></bean>

	<!-- 信用报告异步查询线程池 -->
	<bean id="singleQueryExecutor"
		class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
		<!-- 核心线程数 -->
		<property name="corePoolSize" value="25" />
		<!-- 最大线程数 -->
		<property name="maxPoolSize" value="50" />
		<!-- 队列最大长度 >=mainExecutor.maxSize -->
		<property name="queueCapacity" value="25000" />
		<!-- 线程池维护线程所允许的空闲时间 -->
		<property name="keepAliveSeconds" value="30000" />
		<!-- 线程池对拒绝任务的处理策略 -->
		<property name="rejectedExecutionHandler">
			<!-- AbortPolicy:直接抛出java.util.concurrent.RejectedExecutionException异常 -->
			<bean class="java.util.concurrent.ThreadPoolExecutor$AbortPolicy" />
			<!-- CallerRunsPolicy:主线程直接执行该任务，执行完之后尝试添加下一个任务到线程池中，可以有效降低向线程池内添加任务的速度 -->
			<!-- DiscardOldestPolicy:抛弃旧的任务、暂不支持；会导致被丢弃的任务无法再次被执行 -->
			<!-- DiscardPolicy:抛弃当前任务、暂不支持；会导致被丢弃的任务无法再次被执行 -->
		</property>
	</bean>
	
	<!-- Spring JDBC -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<bean id="namedParameterJdbcTemplate"
		class="org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate">
		<constructor-arg type="org.springframework.jdbc.core.JdbcOperations"
			ref="jdbcTemplate" />
	</bean>
	
</beans>